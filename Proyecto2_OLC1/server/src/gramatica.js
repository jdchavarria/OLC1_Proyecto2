/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,19],$V1=[1,4],$V2=[1,5],$V3=[1,11],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,9],$V8=[1,10],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[5,7,13,14,15,18,19,20,21,22,23,28,31,34,38,39],$Vh=[2,22],$Vi=[1,29],$Vj=[1,30],$Vk=[1,52],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[9,14,46,48,49],$Vq=[2,67],$Vr=[1,57],$Vs=[12,79,81],$Vt=[5,12,17,79,81],$Vu=[10,17,40,41,55,57,58,60,61,65,66,67,68,69,70,76],$Vv=[2,33],$Vw=[1,81],$Vx=[1,80],$Vy=[1,82],$Vz=[10,17,40,41,51,53,55,57,58,60,61,65,66,67,68,69,70,76],$VA=[2,48],$VB=[1,86],$VC=[1,89],$VD=[1,87],$VE=[1,88],$VF=[2,52],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[2,91],$VK=[1,105],$VL=[1,106],$VM=[5,7,12,13,14,15,17,18,19,20,21,22,23,28,31,34,38,39,79,81],$VN=[9,10,17,40,41,51,53,55,60,61,65,66,67,68,69,70,76],$VO=[2,43],$VP=[1,116],$VQ=[1,117],$VR=[9,10,17,40,41,51,53,55,57,58,60,61,65,66,67,68,69,70,76],$VS=[9,10,17,40,41,53,57,58,60,61,65,66,67,68,69,70,76],$VT=[2,39],$VU=[1,121],$VV=[1,122],$VW=[9,10,17,40,41,51,55,57,58,60,61,65,66,67,68,69,70,76],$VX=[2,54],$VY=[1,126],$VZ=[12,78],$V_=[2,75],$V$=[1,165],$V01=[10,17],$V11=[2,69],$V21=[1,191],$V31=[17,79],$V41=[2,79],$V51=[1,219],$V61=[5,7,11,12,13,14,15,17,18,19,20,21,22,23,28,31,34,38,39,79,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"RVOID":7,"RMAIN":8,"PARIZQ":9,"PARDER":10,"LLAVIZQ":11,"LLAVDER":12,"RCLASS":13,"IDENTIFICADOR":14,"RINT":15,"lista_decla":16,"PTCOMA":17,"RSTRING":18,"RDOUBLE":19,"RCHAR":20,"RBOOLEAN":21,"RIMPORT":22,"RSYSTEM":23,"PUNTO":24,"ROUT":25,"RPRINT":26,"valor":27,"RIF":28,"condicion":29,"else":30,"RSWITCH":31,"casos":32,"faltantes":33,"RFOR":34,"dec":35,"incremento":36,"lista_ciclos":37,"RWHILE":38,"RDO":39,"COMA":40,"IGUAL":41,"otra_declaracion":42,"agregar":43,"mul_div":44,"suma_resta":45,"ENTERO":46,"operacion":47,"DECIMAL":48,"CADENA":49,"compuesto":50,"MAS":51,"llamado":52,"POTENCIA":53,"ter":54,"MENOS":55,"terminal":56,"POR":57,"DIVIDIDO":58,"elevado":59,"MAYQUE":60,"MENQUE":61,"diferente":62,"operador":63,"comparadores":64,"DOBLEIG":65,"MAYIGQUE":66,"MENIGQUE":67,"NOIG":68,"AND":69,"OR":70,"NOT":71,"RELSE":72,"anidado":73,"cuerel":74,"RCASE":75,"DOSPTS":76,"detener":77,"RDEFAULT":78,"RBREAK":79,"sel_tipo":80,"RCONTINUE":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RVOID",8:"RMAIN",9:"PARIZQ",10:"PARDER",11:"LLAVIZQ",12:"LLAVDER",13:"RCLASS",14:"IDENTIFICADOR",15:"RINT",17:"PTCOMA",18:"RSTRING",19:"RDOUBLE",20:"RCHAR",21:"RBOOLEAN",22:"RIMPORT",23:"RSYSTEM",24:"PUNTO",25:"ROUT",26:"RPRINT",28:"RIF",31:"RSWITCH",34:"RFOR",38:"RWHILE",39:"RDO",40:"COMA",41:"IGUAL",46:"ENTERO",48:"DECIMAL",49:"CADENA",51:"MAS",53:"POTENCIA",55:"MENOS",57:"POR",58:"DIVIDIDO",60:"MAYQUE",61:"MENQUE",65:"DOBLEIG",66:"MAYIGQUE",67:"MENIGQUE",68:"NOIG",69:"AND",70:"OR",71:"NOT",72:"RELSE",75:"RCASE",76:"DOSPTS",78:"RDEFAULT",79:"RBREAK",81:"RCONTINUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,7],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,4],[6,4],[6,10],[6,9],[6,9],[6,14],[6,9],[6,11],[6,0],[16,3],[16,3],[16,0],[42,3],[42,0],[27,4],[27,2],[27,2],[27,2],[27,3],[43,3],[43,4],[43,1],[43,0],[52,2],[52,0],[47,2],[45,3],[45,3],[45,0],[54,2],[44,3],[44,3],[44,0],[56,4],[56,2],[56,2],[56,2],[56,0],[50,2],[50,2],[50,2],[50,0],[59,1],[59,0],[29,5],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[64,2],[64,2],[64,0],[62,1],[62,0],[30,3],[30,0],[74,3],[74,0],[73,8],[73,0],[32,7],[32,0],[33,5],[33,0],[77,1],[77,0],[35,4],[80,1],[80,1],[80,1],[80,1],[80,1],[80,0],[36,2],[36,2],[37,2],[37,2],[37,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 4:
this.$=instruccionesAPI.nuevoMain($$[$0-1]);
break;
case 5:
this.$=instruccionesAPI.nuevoClass($$[$0-3],$$[$0-1]);
break;
case 6:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-3],TIPO_VALOR.Tipo_Int);
break;
case 7:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-3],TIPO_VALOR.Tipo_String);
break;
case 8:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-3],TIPO_VALOR.Tipo_Double);
break;
case 9:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-3],TIPO_VALOR.Tipo_Char);
break;
case 10:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-3],TIPO_VALOR.Tipo_Boolean);
break;
case 13:
this.$=instruccionesAPI.nuevoImprimir($$[$0-3]);
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf},{1:[3]},{5:[1,19],6:20,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf},o($Vg,[2,3]),{8:[1,21]},{14:[1,22]},{14:[1,23]},{14:[1,24]},{14:[1,25]},{14:[1,26]},{14:[1,27]},{16:28,17:$Vh,40:$Vi,41:$Vj},{14:[1,31]},{24:[1,32]},{9:[1,33]},{9:[1,34]},{9:[1,35]},{9:[1,36]},{11:[1,37]},{1:[2,1]},o($Vg,[2,2]),{9:[1,38]},{11:[1,39]},{16:40,17:$Vh,40:$Vi,41:$Vj},{16:41,17:$Vh,40:$Vi,41:$Vj},{16:42,17:$Vh,40:$Vi,41:$Vj},{16:43,17:$Vh,40:$Vi,41:$Vj},{16:44,17:$Vh,40:$Vi,41:$Vj},{17:[1,45]},{14:[1,46]},{9:$Vk,14:$Vl,27:47,46:$Vm,48:$Vn,49:$Vo},{17:[1,53]},{25:[1,54]},o($Vp,$Vq,{29:55,62:56,71:$Vr}),{9:$Vk,14:$Vl,27:58,46:$Vm,48:$Vn,49:$Vo},{14:[2,86],15:[1,61],18:[1,62],19:[1,63],20:[1,65],21:[1,64],35:59,80:60},o($Vp,$Vq,{62:56,29:66,71:$Vr}),o($Vs,$V0,{6:67,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),{10:[1,68]},{6:69,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf},{17:[1,70]},{17:[1,71]},{17:[1,72]},{17:[1,73]},{17:[1,74]},o($Vt,$V0,{6:75,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),{16:76,17:$Vh,40:$Vi,41:$Vj},{17:[2,24],40:[1,78],42:77},o($Vu,$Vv,{43:79,9:$Vw,51:$Vx,53:$Vy}),o($Vz,$VA,{47:83,54:84,56:85,9:$VB,14:$VC,46:$VD,48:$VE}),o($Vz,$VA,{54:84,56:85,47:90,9:$VB,14:$VC,46:$VD,48:$VE}),o($Vu,$Vv,{43:91,9:$Vw,51:$Vx,53:$Vy}),{10:$VF,46:$VG,50:92,60:$VH,61:$VI},o($Vt,$V0,{6:96,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),{24:[1,97]},{10:[1,98]},{9:$Vk,14:$Vl,27:99,46:$Vm,48:$Vn,49:$Vo},o($Vp,[2,66]),{10:[1,100]},{17:[1,101]},{14:[1,102]},{14:[2,81]},{14:[2,82]},{14:[2,83]},{14:[2,84]},{14:[2,85]},{10:[1,103]},{12:$VJ,37:104,79:$VK,81:$VL},{11:[1,107]},{12:[1,108]},o($Vt,$V0,{6:109,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o($Vt,$V0,{6:110,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o($Vt,$V0,{6:111,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o($Vt,$V0,{6:112,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o($Vt,$V0,{6:113,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o($VM,[2,11]),{17:[2,20]},{17:[2,21]},{14:[1,114]},o($VN,$VO,{44:115,57:$VP,58:$VQ}),{9:$Vk,14:$Vl,27:118,46:$Vm,48:$Vn,49:$Vo},{9:$Vk,14:$Vl,27:119,46:$Vm,48:$Vn,49:$Vo},o($VR,[2,32]),o($VR,[2,26]),o($VS,$VT,{45:120,51:$VU,55:$VV}),o($VN,$VO,{44:123,57:$VP,58:$VQ}),o([10,51,55,57,58],$VA,{54:84,56:85,47:124,9:$VB,14:$VC,46:$VD,48:$VE}),o($VW,$VX,{59:125,53:$VY}),o($VW,$VX,{59:127,53:$VY}),o($VW,$VX,{59:128,53:$VY}),o($VR,[2,27]),o($VR,[2,28]),{10:[1,129]},{10:$VF,46:$VG,50:130,60:$VH,61:$VI},{10:$VF,46:$VG,50:131,60:$VH,61:$VI},{10:$VF,46:$VG,50:132,60:$VH,61:$VI},o($VM,[2,12]),{26:[1,133]},{11:[1,134]},{41:[1,136],60:[1,138],61:[1,139],63:135,65:[1,137],66:[1,140],67:[1,141],68:[1,142]},{11:[1,143]},o($Vp,$Vq,{62:56,29:144,71:$Vr}),{41:[1,145]},{11:[1,146]},{12:[1,147]},{17:[1,148]},{17:[1,149]},{6:150,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf},o($VM,[2,5]),o($VM,[2,6]),o($VM,[2,7]),o($VM,[2,8]),o($VM,[2,9]),o($VM,[2,10]),{16:151,17:$Vh,40:$Vi,41:$Vj},o($VS,$VT,{45:152,51:$VU,55:$VV}),o($Vz,$VA,{56:153,9:$VB,14:$VC,46:$VD,48:$VE}),o($Vz,$VA,{56:154,9:$VB,14:$VC,46:$VD,48:$VE}),o($Vu,$Vv,{43:155,9:$Vw,51:$Vx,53:$Vy}),{10:[2,35],40:[1,157],52:156},o($VR,[2,36]),o($Vz,$VA,{56:85,54:158,9:$VB,14:$VC,46:$VD,48:$VE}),o($Vz,$VA,{56:85,54:159,9:$VB,14:$VC,46:$VD,48:$VE}),o($VR,[2,40]),{10:[1,160]},o($VR,[2,45]),o($VR,[2,53]),o($VR,[2,46]),o($VR,[2,47]),o($VR,[2,29]),{10:[2,49]},{10:[2,50]},{10:[2,51]},{9:[1,161]},{6:162,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf},{9:$Vk,14:$Vl,27:163,46:$Vm,48:$Vn,49:$Vo},o($Vp,[2,56]),o($Vp,[2,57]),o($Vp,[2,58]),o($Vp,[2,59]),o($Vp,[2,60]),o($Vp,[2,61]),o($Vp,[2,62]),o($VZ,$V_,{32:164,75:$V$}),{17:[1,166]},{9:$Vk,14:$Vl,27:167,46:$Vm,48:$Vn,49:$Vo},o($Vs,$V0,{6:168,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),{38:[1,169]},{12:[2,89]},{12:[2,90]},{12:[1,170]},{17:[2,23]},o($VR,[2,25]),o($VN,$VO,{44:171,57:$VP,58:$VQ}),o($VN,$VO,{44:172,57:$VP,58:$VQ}),o($VR,[2,30]),{10:[1,173]},{9:$Vk,14:$Vl,27:174,46:$Vm,48:$Vn,49:$Vo},o($VS,$VT,{45:175,51:$VU,55:$VV}),o($VS,$VT,{45:176,51:$VU,55:$VV}),o($VW,$VX,{59:177,53:$VY}),{9:$Vk,14:$Vl,27:178,46:$Vm,48:$Vn,49:$Vo},{12:[1,179]},o($V01,[2,65],{64:180,69:[1,181],70:[1,182]}),{12:[2,77],33:183,78:[1,184]},{9:$Vk,14:$Vl,27:185,46:$Vm,48:$Vn,49:$Vo},{9:$Vk,14:$Vl,27:186,46:$Vm,48:$Vn,49:$Vo},{17:[2,80]},{12:$VJ,37:187,79:$VK,81:$VL},{9:[1,188]},o($VM,[2,4]),o($VR,[2,41]),o($VR,[2,42]),o($VR,[2,31]),{10:[2,34]},o($VR,[2,37]),o($VR,[2,38]),o($VR,[2,44]),{10:[1,189]},o($VM,$V11,{30:190,72:$V21}),o($V01,[2,55]),o($Vp,$Vq,{62:56,29:192,71:$Vr}),o($Vp,$Vq,{62:56,29:193,71:$Vr}),{12:[1,194]},{76:[1,195]},{76:[1,196]},{36:197,51:[1,198],55:[1,199]},{12:[1,200]},o($Vp,$Vq,{62:56,29:201,71:$Vr}),{17:[1,202]},o($Vt,$V0,{6:203,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o([5,7,11,12,13,14,15,17,18,19,20,21,22,23,31,34,38,39,79,81],[2,73],{73:204,28:[1,205]}),o($V01,[2,63]),o($V01,[2,64]),o($Vt,$V0,{6:206,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o($V31,$V0,{6:207,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o($V31,$V0,{6:208,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),{10:[1,209]},{51:[1,210]},{55:[1,211]},o($Vt,$V0,{6:212,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),{10:[1,213]},o($Vt,$V0,{6:214,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o($VM,[2,14]),o($VM,[2,71],{74:215,11:[1,216]}),{9:[1,217]},o($VM,[2,15]),{17:$V41,77:218,79:$V51},{17:$V41,77:220,79:$V51},{11:[1,221]},{10:[2,87]},{10:[2,88]},o($VM,[2,17]),{17:[1,222]},o($VM,[2,13]),o($V61,[2,68]),{6:223,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf},o($Vp,$Vq,{62:56,29:224,71:$Vr}),{17:[1,225]},{17:[2,78]},{17:[1,226]},o($Vs,$V0,{6:227,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),o($Vt,$V0,{6:228,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),{12:[1,229]},{10:[1,230]},{12:[2,76]},o($VZ,$V_,{32:231,75:$V$}),{12:$VJ,37:232,79:$VK,81:$VL},o($VM,[2,18]),o($V61,[2,70]),{11:[1,233]},o($VZ,[2,74]),{12:[1,234]},{6:235,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf},o($Vt,$V0,{6:236,7:$V1,13:$V2,14:$V3,15:$V4,18:$V5,19:$V6,20:$V7,21:$V8,22:$V9,23:$Va,28:$Vb,31:$Vc,34:$Vd,38:$Ve,39:$Vf}),{12:[1,237]},o($VM,[2,16]),o($V61,$V11,{30:238,72:$V21}),o($V61,[2,72])],
defaultActions: {19:[2,1],61:[2,81],62:[2,82],63:[2,83],64:[2,84],65:[2,85],76:[2,20],77:[2,21],130:[2,49],131:[2,50],132:[2,51],148:[2,89],149:[2,90],151:[2,23],167:[2,80],174:[2,34],210:[2,87],211:[2,88],219:[2,78],225:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPEACION = require('./instrucciones').Tipo_Operacion;
	const TIPO_VALOR = require('./instrucciones').Tipo_Dato;
	const instruccionesAPI = require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://se ignoran espacios en blanco
break;
case 1://se ignoran comentarios de una linea
break;
case 2://comentario multilinea
break;
case 3:return 15;
break;
case 4:return 18;
break;
case 5:return 21;
break;
case 6:return 20;
break;
case 7:return 19;
break;
case 8:return 7;
break;
case 9:return 8;
break;
case 10:return 13;
break;
case 11:return 28;
break;
case 12:return 72;
break;
case 13:return 34;
break;
case 14:return 79;
break;
case 15:return 23;
break;
case 16:return 25;
break;
case 17:return 26;
break;
case 18:return 22;
break;
case 19:return 38;
break;
case 20:return 31;
break;
case 21:return 39;
break;
case 22:return 79;
break;
case 23:return 'RTURN';
break;
case 24:return 75;
break;
case 25:return 78;
break;
case 26:return 81;
break;
case 27:return 'REVALUAR';
break;
case 28:return 24;
break;
case 29:return 17;
break;
case 30:return 40;
break;
case 31:return 9;
break;
case 32:return 10;
break;
case 33:return 'CORIZQ';
break;
case 34:return 'CORDER';
break;
case 35:return 76;
break;
case 36:return 11;
break;
case 37:return 12;
break;
case 38:return 51;
break;
case 39:return 55;
break;
case 40:return 57;
break;
case 41:return 58;
break;
case 42:return 53;
break;
case 43:return 'O_MAS';
break;
case 44:return 'O_MENOS';
break;
case 45:return 'O_POR';
break;
case 46:return 'O_DIVIDIDO';
break;
case 47:return 69;
break;
case 48:return 70;
break;
case 49:return 67;
break;
case 50:return 66;
break;
case 51:return 65;
break;
case 52:return 68;
break;
case 53:return 61;
break;
case 54:return 60;
break;
case 55:return 41;
break;
case 56:return 71;
break;
case 57:
break;
case 58:
break;
case 59:return 49;
break;
case 60:return 48;
break;
case 61:return 46;
break;
case 62:return 14;
break;
case 63:/*se ignoran*/
break;
case 64:return 5;
break;
case 65: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:class\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:import\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:Evaluar\b)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-z0-9_]*)/i,/^(?:[\t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}