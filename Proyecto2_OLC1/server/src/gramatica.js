/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,19],$V1=[1,4],$V2=[1,5],$V3=[1,11],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,9],$V8=[1,10],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[5,7,12,13,14,15,17,18,19,20,21,22,27,29,32,35,36,38,40],$Vh=[5,12,38,40],$Vi=[1,51],$Vj=[1,54],$Vk=[1,52],$Vl=[1,53],$Vm=[1,55],$Vn=[1,48],$Vo=[10,16,39,57,58,59,60],$Vp=[2,40],$Vq=[1,78],$Vr=[1,79],$Vs=[1,80],$Vt=[1,81],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,84],$Vz=[1,82],$VA=[1,83],$VB=[10,16,34,39,46,47,48,53,54,55,56,57,58,59,60],$VC=[57,58],$VD=[2,37],$VE=[34,46,47,48,53,54,55,56,57,58],$VF=[2,49],$VG=[2,47],$VH=[2,48],$VI=[10,16,34,39,46,57,58,59,60],$VJ=[10,16,34,39,46,47,48,57,58,59,60],$VK=[10,16,39,46,47,48,53,54,55,56,59,60],$VL=[1,118],$VM=[1,119],$VN=[12,38,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"RVOID":7,"RMAIN":8,"PARIZQ":9,"PARDER":10,"LLAVIZQ":11,"LLAVDER":12,"RCLASS":13,"IDENTIFICADOR":14,"RINT":15,"PTCOMA":16,"RSTRING":17,"RDOUBLE":18,"RCHAR":19,"RBOOLEAN":20,"RIMPORT":21,"RSYSTEM":22,"PUNTO":23,"ROUT":24,"RPRINT":25,"expresion_cadena":26,"RIF":27,"expresion_logica":28,"RSWITCH":29,"expresion_numerica":30,"casos":31,"RFOR":32,"IGUAL":33,"MAS":34,"RWHILE":35,"RDO":36,"caso_evaluar":37,"RCASE":38,"DOSPTS":39,"RDEFAULT":40,"operadores":41,"O_MAS":42,"O_MENOS":43,"O_POR":44,"O_DIVIDIDO":45,"MENOS":46,"POR":47,"DIVIDIDO":48,"ENTERO":49,"DECIMAL":50,"CADENA":51,"expresion_relacional":52,"MAYQUE":53,"MENQUE":54,"MAYIGQUE":55,"MENIGQUE":56,"DOBLEIG":57,"NOIG":58,"AND":59,"OR":60,"NOT":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RVOID",8:"RMAIN",9:"PARIZQ",10:"PARDER",11:"LLAVIZQ",12:"LLAVDER",13:"RCLASS",14:"IDENTIFICADOR",15:"RINT",16:"PTCOMA",17:"RSTRING",18:"RDOUBLE",19:"RCHAR",20:"RBOOLEAN",21:"RIMPORT",22:"RSYSTEM",23:"PUNTO",24:"ROUT",25:"RPRINT",27:"RIF",29:"RSWITCH",32:"RFOR",33:"IGUAL",34:"MAS",35:"RWHILE",36:"RDO",38:"RCASE",39:"DOSPTS",40:"RDEFAULT",42:"O_MAS",43:"O_MENOS",44:"O_POR",45:"O_DIVIDIDO",46:"MENOS",47:"POR",48:"DIVIDIDO",49:"ENTERO",50:"DECIMAL",51:"CADENA",53:"MAYQUE",54:"MENQUE",55:"MAYIGQUE",56:"MENIGQUE",57:"DOBLEIG",58:"NOIG",59:"AND",60:"OR",61:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,8],[6,6],[6,4],[6,4],[6,4],[6,4],[6,4],[6,3],[6,4],[6,10],[6,8],[6,8],[6,16],[6,8],[6,10],[6,0],[31,2],[31,1],[37,4],[37,3],[41,1],[41,1],[41,1],[41,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,1],[30,1],[30,1],[30,1],[26,3],[26,1],[26,1],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[28,3],[28,3],[28,2],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];			/* se retorna el ast el cual jala haciendo node parser en ese documento esta la carga*/
	
break;
case 2:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 4:
this.$=instruccionesAPI.nuevoMain($$[$0-2]);
break;
case 5:
this.$=instruccionesAPI.nuevoClass($$[$0-4],$$[$0-2]);
break;
case 6:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-2],TIPO_VALOR.Tipo_Int);
break;
case 7:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-2],TIPO_VALOR.Tipo_String);
break;
case 8:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-2],TIPO_VALOR.Tipo_Double);
break;
case 9:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-2],TIPO_VALOR.Tipo_Char);
break;
case 10:
this.$=instruccionesAPI.nuevoDeclaracion($$[$0-2],TIPO_VALOR.Tipo_Boolean);
break;
case 12:
this.$=instruccionesAPI.nuevoImport($$[$0-2]);
break;
case 13:
this.$=instruccionesAPI.nuevoImprimir($$[$0-3]);
break;
case 14:
this.$=instruccionesAPI.nuevoIf($$[$0-5], $$[$0-2]);
break;
case 15:
this.$=instruccionesAPI.nuevoSwitch($$[$0-5], $$[$0-2]);
break;
case 16:
this.$=instruccionesAPI.nuevoPara($$[$0-13],$$[$0-11],$$[$0-9],$$[$0-7],$$[$0-2]);
break;
case 17:
this.$=instruccionesAPI.nuevoMientras($$[$0-5], $$[$0-2]);
break;
case 20:

		$$[$0-1].push($$[$0]);
		this.$=$$[$0-1];
	
break;
case 21:
this.$=instruccionesAPI.nuevoListaCasos($$[$0]);
break;
case 22:
this.$=instruccionesAPI.nuevoCaso($$[$0-2],$$[$0]);
break;
case 23:
this.$=instruccionesAPI.nuevoCasoDef($$[$0]);
break;
case 24:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.SUMA);
break;
case 25:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.RESTA);
break;
case 26:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.MULTIPLICACION);
break;
case 27:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.DIVISION);
break;
case 28:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA);
break;
case 29:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA);
break;
case 30:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION);
break;
case 31:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION);
break;
case 32:
this.$=$$[$0-1];
break;
case 33:
this.$=instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.Tipo_Int);
break;
case 34:
this.$=instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.Tipo_Double);
break;
case 35: case 36: case 39:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.Tipo_String);
break;
case 37: case 40: case 50:
this.$=$$[$0];
break;
case 38:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.CONCATENACION);
break;
case 41:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 42:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 43:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 44:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 45:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DOBLE_IGUAL); 
break;
case 46:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.NO_IGUAL); 
break;
case 47:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND);
break;
case 48:
 this.$ = instruccionesAPI.nuevoOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR);
break;
case 49:
this.$=instruccionesAPI.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NOT);
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},{1:[3]},{5:[1,19],6:20,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},o($Vg,[2,3]),{8:[1,21]},{14:[1,22]},{14:[1,23]},{14:[1,24]},{14:[1,25]},{14:[1,26]},{14:[1,27]},{16:[1,28]},{14:[1,29]},{23:[1,30]},{9:[1,31]},{9:[1,32]},{9:[1,33]},{9:[1,34]},{11:[1,35]},{1:[2,1]},o($Vg,[2,2]),{9:[1,36]},{11:[1,37]},{16:[1,38]},{16:[1,39]},{16:[1,40]},{16:[1,41]},{16:[1,42]},o($Vh,$V0,{6:43,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),{16:[1,44]},{24:[1,45]},{9:$Vi,14:$Vj,26:50,28:46,30:49,49:$Vk,50:$Vl,51:$Vm,52:47,61:$Vn},{9:$Vi,14:$Vj,26:50,30:56,49:$Vk,50:$Vl,51:$Vm,52:57},{14:[1,58]},{9:$Vi,14:$Vj,26:50,28:59,30:49,49:$Vk,50:$Vl,51:$Vm,52:47,61:$Vn},{6:60,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},{10:[1,61]},{4:62,6:3,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},o($Vh,$V0,{6:3,4:63,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vh,$V0,{6:3,4:64,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vh,$V0,{6:65,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vh,$V0,{6:66,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vh,$V0,{6:67,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vg,[2,11]),o($Vh,$V0,{6:68,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),{23:[1,69]},{10:[1,70]},o([10,16,34,46,47,48,53,54,55,56,57,58],[2,50],{59:[1,71],60:[1,72]}),{9:$Vi,14:$Vj,26:50,30:49,49:$Vk,50:$Vl,51:$Vm,52:73},o($Vo,$Vp,{34:$Vq,46:$Vr,47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),{34:$Vy,57:$Vz,58:$VA},{9:$Vi,14:$Vj,26:50,30:85,49:$Vk,50:$Vl,51:$Vm,52:57},o($VB,[2,33]),o($VB,[2,34]),o($VB,[2,35]),o($VB,[2,36]),o($VC,$Vp,{10:[1,86],34:$Vq,46:$Vr,47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VB,$VD),{33:[1,87]},{10:[1,88]},{12:[1,89]},{11:[1,90]},{6:20,7:$V1,12:[1,91],13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},o($Vh,[2,6],{6:20,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vh,[2,7],{6:20,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,12]),{25:[1,92]},{11:[1,93]},{9:$Vi,14:$Vj,26:50,30:49,49:$Vk,50:$Vl,51:$Vm,52:94},{9:$Vi,14:$Vj,26:50,30:49,49:$Vk,50:$Vl,51:$Vm,52:95},o($VE,$VD,{10:$VF,16:$VF}),{9:$Vi,14:$Vj,26:50,30:96,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:50,30:97,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:50,30:98,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:50,30:99,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:50,30:100,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:50,30:101,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:50,30:102,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:50,30:103,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:104,30:49,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:105,30:49,49:$Vk,50:$Vl,51:$Vm,52:57},{9:$Vi,14:$Vj,26:106,30:49,49:$Vk,50:$Vl,51:$Vm,52:57},o($VC,$Vp,{10:[1,107],34:$Vq,46:$Vr,47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),{11:[1,108]},{9:$Vi,14:$Vj,26:50,30:109,49:$Vk,50:$Vl,51:$Vm,52:57},{11:[1,110]},{35:[1,111]},{4:112,6:3,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},o($Vh,$V0,{6:3,4:113,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),{9:[1,114]},{6:115,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},o($VE,$VD,{10:$VG,16:$VG}),o($VE,$VD,{10:$VH,16:$VH}),o($Vo,[2,41],{34:$Vq,46:$Vr,47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($Vo,[2,42],{34:$Vq,46:$Vr,47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($Vo,[2,43],{34:$Vq,46:$Vr,47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($Vo,[2,44],{34:$Vq,46:$Vr,47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VI,[2,28],{47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VI,[2,29],{47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VJ,[2,30],{53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VJ,[2,31],{53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VK,[2,45],{34:$Vy,57:$Vz,58:$VA}),o($VK,[2,46],{34:$Vy,57:$Vz,58:$VA}),o([10,16,34,39,46,47,48,53,54,55,56,59,60],[2,38],{57:$Vz,58:$VA}),o($VB,[2,32]),{31:116,37:117,38:$VL,40:$VM},o($VC,$Vp,{16:[1,120],34:$Vq,46:$Vr,47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),{6:121,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},{9:[1,122]},{6:20,7:$V1,12:[1,123],13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},o($Vh,[2,5],{6:20,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),{9:$Vi,14:$Vj,26:124,30:49,49:$Vk,50:$Vl,51:$Vm,52:57},{12:[1,125]},{12:[1,126],37:127,38:$VL,40:$VM},o($VN,[2,21]),{9:$Vi,14:$Vj,26:50,30:128,49:$Vk,50:$Vl,51:$Vm,52:57},{39:[1,129]},{9:$Vi,14:$Vj,26:50,28:130,30:49,49:$Vk,50:$Vl,51:$Vm,52:47,61:$Vn},{12:[1,131]},{9:$Vi,14:$Vj,26:50,28:132,30:49,49:$Vk,50:$Vl,51:$Vm,52:47,61:$Vn},o($Vh,$V0,{6:3,4:133,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),{10:[1,134],34:$Vy,57:$Vz,58:$VA},o($Vh,$V0,{6:3,4:135,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vh,$V0,{6:136,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($VN,[2,20]),o($VC,$Vp,{34:$Vq,39:[1,137],46:$Vr,47:$Vs,48:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VN,$V0,{6:138,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),{16:[1,139]},o($Vh,$V0,{6:140,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),{10:[1,141]},o($Vh,[2,4],{6:20,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),{16:[1,142]},o($Vh,[2,14],{6:20,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vg,[2,15]),o($VN,$V0,{6:143,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($VN,[2,23]),{14:[1,144]},o($Vg,[2,17]),{16:[1,145]},o($Vh,$V0,{6:3,4:146,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($VN,[2,22]),{34:[1,147]},o($Vh,$V0,{6:148,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vh,[2,13],{6:20,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),{34:[1,149]},o($Vg,[2,18]),{10:[1,150]},{11:[1,151]},{6:152,7:$V1,12:$V0,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf},{12:[1,153]},o($Vh,$V0,{6:154,7:$V1,13:$V2,14:$V3,15:$V4,17:$V5,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,27:$Vb,29:$Vc,32:$Vd,35:$Ve,36:$Vf}),o($Vg,[2,16])],
defaultActions: {19:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION = require('./instrucciones').Tipo_Operacion;
	const TIPO_VALOR = require('./instrucciones').Tipo_Dato;
	const instruccionesAPI = require('./instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://se ignoran espacios en blanco
break;
case 1://se ignoran comentarios de una linea
break;
case 2://comentario multilinea
break;
case 3:return 15;
break;
case 4:return 17;
break;
case 5:return 20;
break;
case 6:return 19;
break;
case 7:return 18;
break;
case 8:return 7;
break;
case 9:return 8;
break;
case 10:return 13;
break;
case 11:return 27;
break;
case 12:return 'RELSE';
break;
case 13:return 32;
break;
case 14:return 'RBREAK';
break;
case 15:return 22;
break;
case 16:return 24;
break;
case 17:return 25;
break;
case 18:return 21;
break;
case 19:return 35;
break;
case 20:return 29;
break;
case 21:return 36;
break;
case 22:return 'RBREAK';
break;
case 23:return 'RTURN';
break;
case 24:return 38;
break;
case 25:return 40;
break;
case 26:return 'RCONTINUE';
break;
case 27:return 'REVALUAR';
break;
case 28:return 23;
break;
case 29:return 16;
break;
case 30:return 'COMA';
break;
case 31:return 9;
break;
case 32:return 10;
break;
case 33:return 'CORIZQ';
break;
case 34:return 'CORDER';
break;
case 35:return 39;
break;
case 36:return 11;
break;
case 37:return 12;
break;
case 38:return 34;
break;
case 39:return 46;
break;
case 40:return 47;
break;
case 41:return 48;
break;
case 42:return 'POTENCIA';
break;
case 43:return 42;
break;
case 44:return 43;
break;
case 45:return 44;
break;
case 46:return 45;
break;
case 47:return 59;
break;
case 48:return 60;
break;
case 49:return 56;
break;
case 50:return 55;
break;
case 51:return 57;
break;
case 52:return 58;
break;
case 53:return 54;
break;
case 54:return 53;
break;
case 55:return 33;
break;
case 56:return 61;
break;
case 57:
break;
case 58:
break;
case 59:return 51;
break;
case 60:return 50;
break;
case 61:return 49;
break;
case 62:return 14;
break;
case 63:/*se ignoran*/
break;
case 64:return 5;
break;
case 65: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:class\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:import\b)/i,/^(?:while\b)/i,/^(?:switch\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:Evaluar\b)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-z0-9_]*)/i,/^(?:[\t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}