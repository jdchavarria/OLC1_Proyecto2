/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,7],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[2,8,11],$V8=[6,14,19,25,26,27,28,29],$V9=[1,32],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[14,19,25,26,27,28,29],$Vg=[10,30],$Vh=[2,54],$Vi=[1,54],$Vj=[1,61],$Vk=[1,68],$Vl=[1,65],$Vm=[1,66],$Vn=[1,67],$Vo=[1,69],$Vp=[1,70],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,76],$Vu=[1,79],$Vv=[1,78],$Vw=[1,81],$Vx=[21,30],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[10,21,30,52,53,54,55,56,57,58,59,60,61,62,63,64,65,83],$VN=[1,102],$VO=[1,118],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[1,123],$VT=[1,124],$VU=[1,125],$VV=[1,126],$VW=[1,127],$VX=[1,128],$VY=[1,129],$VZ=[1,130],$V_=[2,9,14,19,25,26,27,28,29,73,74,76,77,78,82,84,85,87,88,89,90,91],$V$=[10,21,30,52,53,58,59,60,61,62,63,64,65,83],$V01=[2,9,14,25,26,27,28,29,73,74,76,78,82,84,85,87,88,89,90,91],$V11=[1,160],$V21=[1,164],$V31=[10,21,30,52,53,54,55,57,58,59,60,61,62,63,64,65,83],$V41=[10,21,30,58,59,60,61,62,63,64,65,83],$V51=[10,21,30,62,63,64,65,83],$V61=[2,10,12],$V71=[1,202],$V81=[1,201],$V91=[14,82,84],$Va1=[1,231];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"IMPORTS":4,"CLASS":5,"EOF":6,"IMPORT":7,"import":8,"identificador":9,";":10,"class":11,"{":12,"CUERPOCLASE":13,"}":14,"BODYCLASS":15,"ERROR":16,"METODO":17,"DECLARACION":18,"void":19,"(":20,")":21,"CUERPO":22,"TIPO":23,"PARAMETROS":24,"int":25,"double":26,"boolean":27,"char":28,"String":29,",":30,"PARAMETRO":31,"SENTENCIAS":32,"SENTENCIA":33,"ASIGNACION":34,"LLAMADAMETODO":35,"SOUT":36,"IF":37,"SWITCH":38,"FOR":39,"WHILE":40,"DOWHILE":41,"RETURN":42,"BREAK":43,"CONTINUE":44,"IDLIST":45,"ID":46,"ASIGNAREXPRESION":47,"++":48,"--":49,"=":50,"EXPRESION":51,"+":52,"-":53,"*":54,"/":55,"^":56,"%":57,"<":58,">":59,"<=":60,">=":61,"==":62,"!=":63,"||":64,"&&":65,"!":66,"cadena":67,"caracter":68,"decimal":69,"true":70,"false":71,"PARAMETROSLLAMADA":72,"print":73,"println":74,"CONDICION":75,"if":76,"else":77,"switch":78,"CASES":79,"DEFAULT":80,"CASE":81,"case":82,":":83,"default":84,"for":85,"ITERATOR":86,"while":87,"do":88,"return":89,"break":90,"continue":91,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"import",9:"identificador",10:";",11:"class",12:"{",14:"}",15:"BODYCLASS",19:"void",20:"(",21:")",25:"int",26:"double",27:"boolean",28:"char",29:"String",30:",",48:"++",49:"--",50:"=",52:"+",53:"-",54:"*",55:"/",56:"^",57:"%",58:"<",59:">",60:"<=",61:">=",62:"==",63:"!=",64:"||",65:"&&",66:"!",67:"cadena",68:"caracter",69:"decimal",70:"true",71:"false",73:"print",74:"println",76:"if",77:"else",78:"switch",82:"case",83:":",84:"default",85:"for",87:"while",88:"do",89:"return",90:"break",91:"continue"},
productions_: [0,[3,3],[3,2],[3,1],[3,1],[4,2],[4,1],[7,3],[7,2],[5,5],[5,4],[5,5],[5,4],[5,2],[13,2],[13,2],[13,1],[13,1],[13,2],[17,5],[17,5],[17,6],[17,6],[17,2],[23,1],[23,1],[23,1],[23,1],[23,1],[24,3],[24,1],[31,2],[31,1],[22,2],[22,3],[22,1],[32,2],[32,1],[33,1],[33,1],[33,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[18,3],[45,3],[45,1],[46,1],[46,2],[34,3],[34,3],[34,3],[47,2],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,2],[51,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[35,3],[35,4],[72,3],[72,1],[36,4],[36,4],[36,3],[36,3],[75,3],[75,1],[37,3],[37,5],[37,5],[38,6],[38,5],[38,5],[38,4],[38,6],[79,2],[79,1],[81,3],[81,4],[81,2],[80,2],[80,3],[80,2],[39,11],[39,10],[39,2],[86,2],[86,2],[40,3],[41,5],[42,2],[42,3],[43,2],[44,2],[16,1],[16,1],[16,1],[16,1],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 if (listaErrores.length > 0) { let eL = []; eL = eL.concat(listaErrores); listaErrores = []; idError = 0; return { 'error': eL }; } return { 'imports': $$[$0-2], 'class': $$[$0-1] } 
break;
case 2:
 if (listaErrores.length > 0) { let eL = []; eL = eL.concat(listaErrores); listaErrores = []; idError = 0; return { 'error': eL }; } return { 'class': $$[$0-1] } 
break;
case 4: case 8: case 11: case 12: case 13: case 18: case 23: case 32: case 35: case 50: case 93: case 101: case 106: case 109: case 112:
 listaErrores.push(new Error(idError, 'Error Sintactico', this._$.first_line, this._$.first_column, yytext + ' se esperaba ' + yy.parser.hash.expected)); console.error('Error Sintactico: ' + yytext + ' se esperaba ' + yy.parser.hash.expected + ' en la linea ' + this._$.first_line + ' y columna ' + this._$.first_column); idError++; 
break;
case 5: case 14: case 15: case 36: case 102:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 6: case 16: case 17: case 30: case 37: case 53: case 87: case 103:
 this.$ = [$$[$0]]; 
break;
case 7:
 this.$ = { 'import': $$[$0-1] }; 
break;
case 9:
 this.$ = { 'nombreClase': $$[$0-3], 'contenidoClase': $$[$0-1] }; 
break;
case 10:
 this.$ = { 'nombreClase': $$[$0-2], 'contenidoClase': [] }; 
break;
case 19:
 this.$ = {'nombreMetodo': $$[$0-3], 'tipo': $$[$0-4], 'parametrosMetodo': [], 'contenidoMetodo': $$[$0] }; if(returnSetencia && returnExpresion) { listaErrores.push(new Error(idError, 'Error Sintactico', lineaError, columnaError, 'Valor de retorno inesperado')); console.error('Error Sintactico: Valor de retorno inesperado en la linea ' + lineaError + ' y columna ' + columnaError); idError++; } returnSetencia = false; if(contadorBreak>0 || contadorContinue>0) { listaErrores.push(new Error(idError, 'Error Sintactico', lineaError, columnaError, 'break o continue fuera de ciclo')); console.error('Error Sintactico: break o continue fuera de ciclo en la linea ' + lineaError + ' y columna ' + columnaError); idError++; } contadorBreak = 0; contadorContinue = 0; 
break;
case 20:
 this.$ = {'nombreMetodo': $$[$0-3], 'tipo': $$[$0-4], 'parametrosMetodo': [], 'contenidoMetodo': $$[$0] }; if(returnSetencia && !returnExpresion) { listaErrores.push(new Error(idError, 'Error Sintactico', lineaError, columnaError, 'Falta valor de retorno')); console.error('Error Sintactico: Falta valor de retorno en la linea ' + lineaError + ' y columna ' + columnaError); idError++; } returnSetencia = false; if(contadorBreak>0 || contadorContinue>0) { listaErrores.push(new Error(idError, 'Error Sintactico', lineaError, columnaError, 'break o continue fuera de ciclo')); console.error('Error Sintactico: break o continue fuera de ciclo en la linea ' + lineaError + ' y columna ' + columnaError); idError++; } contadorBreak = 0; contadorContinue = 0; 
break;
case 21:
 this.$ = {'nombreMetodo': $$[$0-4], 'tipo': $$[$0-5], 'parametrosMetodo': $$[$0-2], 'contenidoMetodo': $$[$0] }; if(returnSetencia && returnExpresion) { listaErrores.push(new Error(idError, 'Error Sintactico', lineaError, columnaError, 'Valor de retorno inesperado')); console.error('Error Sintactico: Valor de retorno inesperado en la linea ' + lineaError + ' y columna ' + columnaError); idError++; } returnSetencia = false; if(contadorBreak>0 || contadorContinue>0) { listaErrores.push(new Error(idError, 'Error Sintactico', lineaError, columnaError, 'break o continue fuera de ciclo')); console.error('Error Sintactico: break o continue fuera de ciclo en la linea ' + lineaError + ' y columna ' + columnaError); idError++; } contadorBreak = 0; contadorContinue = 0; 
break;
case 22:
 this.$ = {'nombreMetodo': $$[$0-4], 'tipo': $$[$0-5], 'parametrosMetodo': $$[$0-2], 'contenidoMetodo': $$[$0] }; if(returnSetencia && !returnExpresion) { listaErrores.push(new Error(idError, 'Error Sintactico', lineaError, columnaError, 'Falta valor de retorno')); console.error('Error Sintactico: Falta valor de retorno en la linea ' + lineaError + ' y columna ' + columnaError); idError++; } returnSetencia = false; if(contadorBreak>0 || contadorContinue>0) { listaErrores.push(new Error(idError, 'Error Sintactico', lineaError, columnaError, 'break o continue fuera de ciclo')); console.error('Error Sintactico: break o continue fuera de ciclo en la linea ' + lineaError + ' y columna ' + columnaError); idError++; } contadorBreak = 0; contadorContinue = 0; 
break;
case 24:
 this.$ = 'int'; 
break;
case 25:
 this.$ = 'double'; 
break;
case 26:
 this.$ = 'boolean'; 
break;
case 27:
 this.$ = 'char'; 
break;
case 28:
 this.$ = 'String'; 
break;
case 29: case 52: case 86:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 31:
 this.$ = { 'tipo': $$[$0-1], 'identificador' : $$[$0] }; 
break;
case 33:
 this.$ = []; 
break;
case 34: case 92:
 this.$ = $$[$0-1]; 
break;
case 38:
 this.$ = { 'declaracion' : $$[$0] }; 
break;
case 39:
 this.$ = { 'asignacion' : $$[$0] }; 
break;
case 40:
 this.$ = { 'llamadaMetodo' : $$[$0-1] }; 
break;
case 41: case 42: case 59: case 77: case 78: case 79: case 80: case 81: case 82: case 83:
 this.$ = $$[$0]; 
break;
case 43:
 this.$ = { 'switch' : $$[$0] }; contadorBreak--; contadorContinue--; 
break;
case 44:
 this.$ = { 'for' : $$[$0] }; contadorBreak--; contadorContinue--; 
break;
case 45:
 this.$ = { 'while' : $$[$0] }; contadorBreak--; contadorContinue--; 
break;
case 46:
 this.$ = { 'do' : $$[$0] }; contadorBreak--; contadorContinue--; 
break;
case 47:
 this.$ = { 'return' : $$[$0] }; 
break;
case 48:
 this.$ = 'break'; 
break;
case 49:
 this.$ = 'continue'; 
break;
case 51:
 this.$ = { 'tipo' : $$[$0-2], identificadores: $$[$0-1] }; 
break;
case 54:
 this.$ = {'identificador': $$[$0] }; 
break;
case 55:
 this.$ = {'identificador': $$[$0-1], 'valor' : $$[$0] }; 
break;
case 56:
 this.$ = {'identificador': $$[$0-2], 'valor' : $$[$0-1] }; 
break;
case 57:
 this.$ = {'identificador': $$[$0-2], 'valor' : $$[$0-2] + ' + 1' }; 
break;
case 58:
 this.$ = {'identificador': $$[$0-2], 'valor' : $$[$0-2] + ' - 1' }; 
break;
case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 75: case 76:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 84:
 this.$ = { 'identificadorMetodo' : $$[$0-2], 'parametros' : [] }; 
break;
case 85:
 this.$ = { 'identificadorMetodo' : $$[$0-3], 'parametros' : $$[$0-1] }; 
break;
case 88:
 this.$ = { 'print' : [] }; 
break;
case 89:
 this.$ = { 'println' : [] }; 
break;
case 90:
 this.$ = { 'print' : $$[$0-1] }; 
break;
case 91:
 this.$ = { 'println' : $$[$0-1] }; 
break;
case 94:
 this.$ = { 'if' : { 'condicion' : $$[$0-1], 'sentencias' : $$[$0] } }; 
break;
case 95: case 96:
 this.$ = { 'if' : { 'condicion' : $$[$0-3], 'sentencias' : $$[$0-2] }, 'else': $$[$0] }; 
break;
case 97:
 this.$ = { 'condicion' : $$[$0-4], 'sentenciasCase' : $$[$0-2], 'default': $$[$0-1] }; 
break;
case 98:
 this.$ = { 'condicion' : $$[$0-3], 'sentenciasCase' : $$[$0-1] }; 
break;
case 99:
 this.$ = { 'condicion' : $$[$0-3], 'default' : $$[$0-1] }; 
break;
case 100:
 this.$ = { 'condicion' : $$[$0-2] }; 
break;
case 104:
 this.$ = { 'expresion' : $$[$0-1], 'sentencias' : [] }; 
break;
case 105:
 this.$ = { 'expresion' : $$[$0-2], 'sentencias' : $$[$0] }; 
break;
case 107:
 this.$ = { 'sentencias' : [] }; 
break;
case 108:
 this.$ = { 'sentencias' : $$[$0] }; 
break;
case 110:
 this.$ = { 'initializer' : { 'tipo' : $$[$0-8], identificador: $$[$0-7], 'valor' : $$[$0-6] }, 'condicion' : $$[$0-4], 'iterator' : $$[$0-2], 'sentencias' : $$[$0] }; 
break;
case 111:
 this.$ = { 'initializer' : { identificador: $$[$0-7], 'valor' : $$[$0-6] }, 'condicion' : $$[$0-4], 'iterator' : $$[$0-3], 'sentencias' : $$[$0] }; 
break;
case 113:
 this.$ = {'identificador': $$[$0-1], 'valor' : $$[$0-1] + ' + 1' }; 
break;
case 114:
 this.$ = {'identificador': $$[$0-1], 'valor' : $$[$0-1] + ' - 1' }; 
break;
case 115:
 this.$ = { 'condicion' : $$[$0-1], 'sentencias' : $$[$0] }; 
break;
case 116:
 this.$ = { 'sentencias' : $$[$0-3], 'while' : $$[$0-1] }; 
break;
case 117:
 this.$ = ''; returnExpresion = false; returnSetencia = true; lineaError = this._$.first_line; columnaError = this._$.first_column; 
break;
case 118:
 this.$ = $$[$0-1]; returnExpresion = true; returnSetencia = true; lineaError = this._$.first_line; columnaError = this._$.first_column; 
break;
case 119:
 contadorBreak++; lineaError = this._$.first_line; columnaError = this._$.first_column; 
break;
case 120:
 contadorContinue++; lineaError = this._$.first_line; columnaError = this._$.first_column; 
break;
}
},
table: [{2:[1,5],3:1,4:2,5:3,6:[1,4],7:6,8:$V0,11:$V1},{1:[3]},{2:[1,11],5:9,7:10,8:$V0,11:$V1},{6:[1,12]},{1:[2,3]},{1:[2,4],12:$V2,14:$V3,16:13,20:$V4,21:$V5,83:$V6},o($V7,[2,6]),{2:[1,20],9:[1,19]},{2:[1,22],9:[1,21]},{6:[1,23]},o($V7,[2,5]),{12:$V2,14:$V3,16:13,20:$V4,21:$V5,83:$V6},{1:[2,2]},{6:[2,13]},o($V8,[2,121]),o($V8,[2,122]),o($V8,[2,123]),o($V8,[2,124]),o($V8,[2,125]),{12:[1,24]},{12:[1,25]},{10:[1,26]},o($V7,[2,8]),{1:[2,1]},{2:[1,31],13:27,14:[1,28],17:29,18:30,19:$V9,23:33,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{14:[1,40],15:[1,39]},o($V7,[2,7]),{14:[1,41],17:42,18:43,19:$V9,23:33,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},{6:[2,10]},o($Vf,[2,16]),o($Vf,[2,17]),{12:$V2,14:$V3,16:44,20:$V4,21:$V5,83:$V6},{2:[1,46],9:[1,45]},{9:[1,47],45:48,46:49},{9:[2,24]},{9:[2,25]},{9:[2,26]},{9:[2,27]},{9:[2,28]},{14:[1,50]},{6:[2,12]},{6:[2,9]},o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,18]),{20:[1,51]},o($Vf,[2,23]),o($Vg,$Vh,{47:53,20:[1,52],50:$Vi}),{10:[1,55],30:[1,56]},o($Vg,[2,53]),{6:[2,11]},{2:$Vj,21:[1,57],23:60,24:58,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,31:59},{2:$Vj,21:[1,62],23:60,24:63,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,31:59},o($Vg,[2,55]),{9:$Vk,20:$Vl,35:74,51:64,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},o([2,9,14,19,25,26,27,28,29,73,74,76,78,82,84,85,87,88,89,90,91],[2,51]),{9:$Vt,46:75},{2:$Vu,12:$Vv,22:77},{21:[1,80],30:$Vw},o($Vx,[2,30]),{9:[1,82]},o($Vx,[2,32]),{2:$Vu,12:$Vv,22:83},{21:[1,84],30:$Vw},o($Vg,[2,59],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),{9:$Vk,20:$Vl,35:74,51:99,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:100,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:101,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},o($VM,[2,77],{20:$VN}),o($VM,[2,78]),o($VM,[2,79]),o($VM,[2,80]),o($VM,[2,81]),o($VM,[2,82]),o($VM,[2,83]),o($Vg,[2,52]),o($Vg,$Vh,{47:53,50:$Vi}),o($Vf,[2,19]),{2:$VO,9:$VP,14:[1,103],18:106,23:119,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,32:104,33:105,34:107,35:108,36:109,37:110,38:111,39:112,40:113,41:114,42:115,43:116,44:117,73:$VQ,74:$VR,76:$VS,78:$VT,85:$VU,87:$VV,88:$VW,89:$VX,90:$VY,91:$VZ},o($V_,[2,35]),{2:$Vu,12:$Vv,22:131},{2:$Vj,23:60,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,31:132},o($Vx,[2,31]),o($Vf,[2,20]),{2:$Vu,12:$Vv,22:133},{9:$Vk,20:$Vl,35:74,51:134,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:135,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:136,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:137,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:138,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:139,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:140,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:141,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:142,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:143,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:144,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:145,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:146,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{9:$Vk,20:$Vl,35:74,51:147,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{21:[1,148],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o($V$,[2,75],{54:$VA,55:$VB,56:$VC,57:$VD}),o($VM,[2,76]),{9:$Vk,20:$Vl,21:[1,149],35:74,51:151,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:150},o($V_,[2,33]),{2:$VO,9:$VP,14:[1,152],18:106,23:119,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,33:153,34:107,35:108,36:109,37:110,38:111,39:112,40:113,41:114,42:115,43:116,44:117,73:$VQ,74:$VR,76:$VS,78:$VT,85:$VU,87:$VV,88:$VW,89:$VX,90:$VY,91:$VZ},o($V01,[2,37]),o($V01,[2,38]),o($V01,[2,39]),{10:[1,154]},o($V01,[2,41]),o($V01,[2,42]),o($V01,[2,43]),o($V01,[2,44]),o($V01,[2,45]),o($V01,[2,46]),o($V01,[2,47]),o($V01,[2,48]),o($V01,[2,49]),o($V01,[2,50]),{9:$Vt,45:48,46:49},{20:$VN,47:155,48:[1,156],49:[1,157],50:$Vi},{2:$V11,20:[1,158],75:159},{2:$V11,20:[1,161],75:162},{2:$V11,20:$V21,75:163},{2:$V11,20:$V21,75:165},{2:[1,167],20:[1,166]},{2:$V11,20:$V21,75:168},{2:$Vu,12:$Vv,22:169},{9:$Vk,10:[1,170],20:$Vl,35:74,51:171,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{10:[1,172]},{10:[1,173]},o($Vf,[2,21]),o($Vx,[2,29]),o($Vf,[2,22]),o($V$,[2,60],{54:$VA,55:$VB,56:$VC,57:$VD}),o($V$,[2,61],{54:$VA,55:$VB,56:$VC,57:$VD}),o($V31,[2,62],{56:$VC}),o($V31,[2,63],{56:$VC}),o($VM,[2,64]),o($V31,[2,65],{56:$VC}),o($V41,[2,66],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD}),o($V41,[2,67],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD}),o($V41,[2,68],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD}),o($V41,[2,69],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD}),o($V51,[2,70],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH}),o($V51,[2,71],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH}),o([10,21,30,64,83],[2,72],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL}),o([10,21,30,64,65,83],[2,73],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ}),o($VM,[2,74]),o($VM,[2,84]),{21:[1,174],30:[1,175]},o($Vx,[2,87],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),o($V_,[2,34]),o($V01,[2,36]),o($V01,[2,40]),{10:[1,176]},{10:[1,177]},{10:[1,178]},{9:$Vk,20:$Vl,21:[1,179],35:74,51:180,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{10:[1,181]},o($V61,[2,93]),{9:$Vk,20:$Vl,21:[1,182],35:74,51:180,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{10:[1,183]},{2:$Vu,12:$Vv,22:184},{9:$Vk,20:$Vl,35:74,51:180,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{12:[1,185]},{9:[1,187],23:186,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve},o($V01,[2,112]),{2:$Vu,12:$Vv,22:188},{87:[1,189]},o($V01,[2,117]),{10:[1,190],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o($V01,[2,119]),o($V01,[2,120]),o($VM,[2,85]),{9:$Vk,20:$Vl,35:74,51:191,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},o($V01,[2,56]),o($V01,[2,57]),o($V01,[2,58]),{10:[1,192]},{21:[1,193],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o($V01,[2,90]),{10:[1,194]},o($V01,[2,91]),o($V01,[2,94],{77:[1,195]}),{2:[1,199],14:[1,198],79:196,80:197,81:200,82:$V71,84:$V81},{9:[1,203]},{47:204,50:$Vi},o($V01,[2,115]),{2:$V11,20:$V21,75:205},o($V01,[2,118]),o($Vx,[2,86],{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL}),o($V01,[2,88]),o($V61,[2,92]),o($V01,[2,89]),{2:$Vu,12:$Vv,22:207,37:206,76:$VS},{14:[1,209],80:208,81:210,82:$V71,84:$V81},{14:[1,211]},o($V01,[2,100]),{12:$V2,14:$V3,16:212,20:$V4,21:$V5,83:$V6},o($V91,[2,103]),{2:[1,214],83:[1,213]},{2:[1,216],9:$Vk,20:$Vl,35:74,51:215,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{47:217,50:$Vi},{10:[1,218]},{10:[1,219]},o($V01,[2,95]),o($V01,[2,96]),{14:[1,220]},o($V01,[2,98]),o($V91,[2,102]),o($V01,[2,99]),{14:[1,221]},{2:$VO,9:$VP,14:[2,107],18:106,23:119,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,32:222,33:105,34:107,35:108,36:109,37:110,38:111,39:112,40:113,41:114,42:115,43:116,44:117,73:$VQ,74:$VR,76:$VS,78:$VT,85:$VU,87:$VV,88:$VW,89:$VX,90:$VY,91:$VZ},{14:[2,109]},{52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,83:[1,223]},o($V91,[2,106]),{10:[1,224]},{9:$Vk,20:$Vl,35:74,51:225,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},o($V01,[2,116]),o($V01,[2,97]),o($V01,[2,101]),{2:$VO,9:$VP,14:[2,108],18:106,23:119,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,33:153,34:107,35:108,36:109,37:110,38:111,39:112,40:113,41:114,42:115,43:116,44:117,73:$VQ,74:$VR,76:$VS,78:$VT,85:$VU,87:$VV,88:$VW,89:$VX,90:$VY,91:$VZ},o($V91,[2,104],{33:105,18:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,41:114,42:115,43:116,44:117,23:119,32:226,2:$VO,9:$VP,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,73:$VQ,74:$VR,76:$VS,78:$VT,85:$VU,87:$VV,88:$VW,89:$VX,90:$VY,91:$VZ}),{9:$Vk,20:$Vl,35:74,51:227,53:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs},{10:[1,228],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},o($V91,[2,105],{18:106,34:107,35:108,36:109,37:110,38:111,39:112,40:113,41:114,42:115,43:116,44:117,23:119,33:153,2:$VO,9:$VP,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,73:$VQ,74:$VR,76:$VS,78:$VT,85:$VU,87:$VV,88:$VW,89:$VX,90:$VY,91:$VZ}),{10:[1,229],52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL},{9:$Va1,86:230},{9:$Va1,86:232},{21:[1,233]},{48:[1,234],49:[1,235]},{21:[1,236]},{2:$Vu,12:$Vv,22:237},{21:[2,113]},{21:[2,114]},{2:$Vu,12:$Vv,22:238},o($V01,[2,111]),o($V01,[2,110])],
defaultActions: {4:[2,3],12:[2,2],13:[2,13],23:[2,1],28:[2,10],34:[2,24],35:[2,25],36:[2,26],37:[2,27],38:[2,28],40:[2,12],41:[2,9],50:[2,11],214:[2,109],234:[2,113],235:[2,114]},
    parseError: function parseError(str, hash) {
        this.hash = hash;
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

      const { Error } = require('../modelos/Error');

      var idError = 1;
      var lineaError = 0; // Para los errores con los return, break, continue
      var columnaError = 0; // Para los errores con los return, break, continue
      var listaErrores = [];

      var returnExpresion = false; // Retorno de expresiones en funciones o metodos con tipo
      var returnSetencia = false; // Retorno obligatorio

      var contadorBreak = 0; // Auxiliar para saber si un break esta dentro de un ciclo
      var contadorContinue = 0; // Auxiliar para saber si un continue esta dentro de un ciclo
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* omitir espacios en blanco */
break;
case 1:/* omitir comentarios */
break;
case 2:return 12
break;
case 3:return 14
break;
case 4:return 20
break;
case 5:return 21
break;
case 6:return 30
break;
case 7:return '.'
break;
case 8:return 83
break;
case 9:return 10
break;
case 10:return 27
break;
case 11:return 90
break;
case 12:return 82
break;
case 13:return 28
break;
case 14:return 11
break;
case 15:return 91
break;
case 16:return 84
break;
case 17:return 88
break;
case 18:return 26
break;
case 19:return 77
break;
case 20:return 71
break;
case 21:return 85
break;
case 22:return 76
break;
case 23:return 8
break;
case 24:return 25
break;
case 25:return 'out'
break;
case 26:return 73
break;
case 27:return 74
break;
case 28:return 89
break;
case 29:return 29
break;
case 30:return 78
break;
case 31:return 'System'
break;
case 32:return 70
break;
case 33:return 19
break;
case 34:return 87
break;
case 35:return 60
break;
case 36:return 58
break;
case 37:return 62
break;
case 38:return 61
break;
case 39:return 59
break;
case 40:return 63
break;
case 41:return 64
break;
case 42:return 65
break;
case 43:return 66
break;
case 44:return 50
break;
case 45:return 48
break;
case 46:return 52
break;
case 47:return 49
break;
case 48:return 53
break;
case 49:return 54
break;
case 50:return 55
break;
case 51:return 56
break;
case 52:return 57
break;
case 53:return 9
break;
case 54:return 69
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 57:return 6; // Token fin de archivo
break;
case 58: listaErrores.push(new Error(idError, 'Error Lexico', yy_.yylloc.first_line, yy_.yylloc.first_column, 'Caracter desconocido: ' + yy_.yytext)); console.error('Error Lexico: ' + yy_.yytext + ' en la linea ' + yy_.yylloc.first_line + ' y columna ' + yy_.yylloc.first_column); idError++; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:((\/\*[\s\S]*?\*\/|\/\/.*)))/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:boolean\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:import\b)/,/^(?:int\b)/,/^(?:out\b)/,/^(?:System\.out\.print\b)/,/^(?:System\.out\.println\b)/,/^(?:return\b)/,/^(?:String\b)/,/^(?:switch\b)/,/^(?:System\b)/,/^(?:true\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:((([a-zA-Z_])[a-zA-Z0-9_]*)))/,/^(?:(((([0-9]+))(\.(([0-9]+)))?)))/,/^(?:(((('))((?:\\(n|t|r|\\|"|\\')|(?:(?!(('))).))?)((')))))/,/^(?:(((("))((?:\\(("))|(?:(?!(("))).))*)((")))))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}